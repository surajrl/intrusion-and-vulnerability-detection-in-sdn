from nfstream import NFStreamer
import time
import fcntl
import argparse
import csv

HEADER = [
    "id",
    "bidirectional_duration_ms",
    "bidirectional_packets",
    "bidirectional_bytes",
    "src2dst_duration_ms",
    "src2dst_packets",
    "src2dst_bytes",
    "dst2src_duration_ms",
    "dst2src_packets",
    "dst2src_bytes",
    "bidirectional_min_ps",
    "bidirectional_mean_ps",
    "bidirectional_stddev_ps",
    "bidirectional_max_ps",
    "src2dst_min_ps",
    "src2dst_mean_ps",
    "src2dst_stddev_ps",
    "src2dst_max_ps",
    "dst2src_min_ps",
    "dst2src_mean_ps",
    "dst2src_stddev_ps",
    "dst2src_max_ps",
    "bidirectional_min_piat_ms",
    "bidirectional_mean_piat_ms",
    "bidirectional_stddev_piat_ms",
    "bidirectional_max_piat_ms",
    "src2dst_min_piat_ms",
    "src2dst_mean_piat_ms",
    "src2dst_stddev_piat_ms",
    "src2dst_max_piat_ms",
    "dst2src_min_piat_ms",
    "dst2src_mean_piat_ms",
    "dst2src_stddev_piat_ms",
    "dst2src_max_piat_ms",
    "bidirectional_syn_packets",
    "bidirectional_cwr_packets",
    "bidirectional_ece_packets",
    "bidirectional_urg_packets",
    "bidirectional_ack_packets",
    "bidirectional_psh_packets",
    "bidirectional_rst_packets",
    "bidirectional_fin_packets",
    "src2dst_syn_packets",
    "src2dst_cwr_packets",
    "src2dst_ece_packets",
    "src2dst_urg_packets",
    "src2dst_ack_packets",
    "src2dst_psh_packets",
    "src2dst_rst_packets",
    "src2dst_fin_packets",
    "dst2src_syn_packets",
    "dst2src_cwr_packets",
    "dst2src_ece_packets",
    "dst2src_urg_packets",
    "dst2src_ack_packets",
    "dst2src_psh_packets",
    "dst2src_rst_packets",
    "dst2src_fin_packets",
    "label",
]


def run(network_interface_name, output_dir):

    my_streamer = NFStreamer(
        source=network_interface_name,
        decode_tunnels=False,  # Disable GTP/CAPWAP/TZSP tunnels decoding.
        bpf_filter=None,
        promiscuous_mode=True,  # Enable promiscuous capture mode.
        snapshot_length=1536,  # Control packet slicing size (truncation) in bytes.
        idle_timeout=120,  # Flows that are idle (no packets received) for more than 120 seconds are expired.
        active_timeout=5,  # Flows that are active for more than <active_timeout> seconds are expired.
        accounting_mode=3,  # Accounting mode that will be used to report bytes related features, 3: payload.
        udps=None,
        n_dissections=0,  # Disable L7 visibility feature.
        statistical_analysis=True,  # Enable post-mortem flow statistical analysis.
        splt_analysis=0,
        n_meters=0,
        max_nflows=0,
        performance_report=0,
        system_visibility_mode=0,
        system_visibility_poll_ms=100,
    )

    timestamp = time.strftime("%Y-%m-%d_%H-%M-%S")
    output_filepath = output_dir + f"/flow_extraction_{timestamp}.csv"
    with open(output_filepath, "a", newline="") as output_file:
        print(f"Extracting flows from network interface {network_interface_name}.")
        print(f"Flow features saved in {output_file.name}.")

        try:
            csv_writer = csv.writer(output_file)

            fcntl.flock(output_file, fcntl.LOCK_EX)  # Acquire an exclusive lock.
            csv_writer.writerow(HEADER)
            fcntl.flock(output_file, fcntl.LOCK_UN)  # Reñease the lock.

            flows_extracted_count = 0

            for flow in my_streamer:
                flows_extracted_count += 1
                features = [
                    flow.id.value,  # Used to track the flow, not for prediction.
                    flow.bidirectional_duration_ms,
                    flow.bidirectional_packets,
                    flow.bidirectional_bytes,
                    flow.src2dst_duration_ms,
                    flow.src2dst_packets,
                    flow.src2dst_bytes,
                    flow.dst2src_duration_ms,
                    flow.dst2src_packets,
                    flow.dst2src_bytes,
                    flow.bidirectional_min_ps,
                    flow.bidirectional_mean_ps,
                    flow.bidirectional_stddev_ps,
                    flow.bidirectional_max_ps,
                    flow.src2dst_min_ps,
                    flow.src2dst_mean_ps,
                    flow.src2dst_stddev_ps,
                    flow.src2dst_max_ps,
                    flow.dst2src_min_ps,
                    flow.dst2src_mean_ps,
                    flow.dst2src_stddev_ps,
                    flow.dst2src_max_ps,
                    flow.bidirectional_min_piat_ms,
                    flow.bidirectional_mean_piat_ms,
                    flow.bidirectional_stddev_piat_ms,
                    flow.bidirectional_max_piat_ms,
                    flow.src2dst_min_piat_ms,
                    flow.src2dst_mean_piat_ms,
                    flow.src2dst_stddev_piat_ms,
                    flow.src2dst_max_piat_ms,
                    flow.dst2src_min_piat_ms,
                    flow.dst2src_mean_piat_ms,
                    flow.dst2src_stddev_piat_ms,
                    flow.dst2src_max_piat_ms,
                    flow.bidirectional_syn_packets,
                    flow.bidirectional_cwr_packets,
                    flow.bidirectional_ece_packets,
                    flow.bidirectional_urg_packets,
                    flow.bidirectional_ack_packets,
                    flow.bidirectional_psh_packets,
                    flow.bidirectional_rst_packets,
                    flow.bidirectional_fin_packets,
                    flow.src2dst_syn_packets,
                    flow.src2dst_cwr_packets,
                    flow.src2dst_ece_packets,
                    flow.src2dst_urg_packets,
                    flow.src2dst_ack_packets,
                    flow.src2dst_psh_packets,
                    flow.src2dst_rst_packets,
                    flow.src2dst_fin_packets,
                    flow.dst2src_syn_packets,
                    flow.dst2src_cwr_packets,
                    flow.dst2src_ece_packets,
                    flow.dst2src_urg_packets,
                    flow.dst2src_ack_packets,
                    flow.dst2src_psh_packets,
                    flow.dst2src_rst_packets,
                    flow.dst2src_fin_packets,
                    "unlabelled",  # Upon extraction the flow is always unlabelled.
                ]

                # Append features to the output file.
                fcntl.flock(output_file, fcntl.LOCK_EX)  # Acquire an exclusive lock.
                csv_writer.writerow(features)
                fcntl.flock(output_file, fcntl.LOCK_UN)  # Reñease the lock.

        finally:
            print(
                f"Total flows extracted from {network_interface_name}: {flows_extracted_count}."
            )


if __name__ == "__main__":
    parser = argparse.ArgumentParser()
    parser.add_argument(
        "-i", "--interface", type=str, help="Specify the network interface."
    )
    parser.add_argument(
        "-o",
        "--output_dir",
        type=str,
        help="Specify the flow features extraction output directory.",
    )
    args = parser.parse_args()

    if not args.interface:
        print("Please provide a network interface using the -i or --interface option.")
        exit()
    if not args.output:
        print(
            "Please provide an output directory for the flow features extraction using the -o or --output_dir option."
        )
        exit()

    run(args.interface, args.output_dir)
