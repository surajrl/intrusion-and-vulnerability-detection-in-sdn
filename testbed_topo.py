from mininet.topo import Topo
from mininet.net import Mininet
from mininet.node import Node, RemoteController
from mininet.log import setLogLevel, info
from mininet.cli import CLI


KALI_OUTSIDER = "205.174.165.73"
WIN_OUTSIDER_1 = "205.174.165.69"
WIN_OUTSIDER_2 = "205.174.165.70"
WIN_OUTSIDER_3 = "205.174.165.71"

FIREWALL = {"local": "172.16.0.1", "public": "205.174.165.80"}

DNS_DC_SERVER = "192.168.10.3"
WEB_SERVER_16_PUBLIC = {"local": "192.168.10.50", "public": "205.174.165.68"}

UBUNTU_SERVER_12_PUBLIC = {"local": "192.168.10.51", "public": "205.174.165.66"}

UBUNTU_14_32B = "192.168.10.19"
UBUNTU_14_64B = "192.168.10.17"
UBUNTU_16_32B = "192.168.10.16"
UBUNTU_16_64B = "192.168.10.12"
WIN_7_PRO_64B = "192.168.10.9"
WIN_8_64B = "192.168.10.5"
WIN_VISTA_64B = "192.168.10.8"
WIN_10_PRO_32B = "192.168.10.14"
WIN_10_64B = "192.168.10.15"
MAC = "192.168.10.25"


class LinuxRouter(Node):
    "A Node with IP forwarding enabled."

    # pylint: disable=arguments-differ
    def config(self, **params):
        super(LinuxRouter, self).config(**params)
        # Enable forwarding on the router
        self.cmd("sysctl net.ipv4.ip_forward=1")

    def terminate(self):
        self.cmd("sysctl net.ipv4.ip_forward=0")
        super(LinuxRouter, self).terminate()


class NetworkTopo(Topo):
    "A LinuxRouter connecting three IP subnets"

    # pylint: disable=arguments-differ
    # def build(self, **_opts):

    #     defaultIP = "192.168.10.1/24"  # IP address for r0-eth1
    #     router = self.addNode("r0", cls=LinuxRouter, ip=defaultIP)

    #     s1, s2 = [self.addSwitch(s) for s in ("s1", "s2")]

    #     self.addLink(
    #         s1, router, intfName2="r0-eth1", params2={"ip": defaultIP}
    #     )  # for clarity
    #     self.addLink(s2, router, intfName2="r0-eth2", params2={"ip": "172.16.0.1/12"})

    #     h1 = self.addHost("h1", ip="192.168.10.50/24", defaultRoute="via 192.168.10.1")
    #     h2 = self.addHost("h2", ip="172.16.0.100/12", defaultRoute="via 172.16.0.1")

    #     for h, s in [(h1, s1), (h2, s2)]:
    #         self.addLink(h, s)
    def build(self, **_opts):
        h1 = self.addHost("h1", ip="1.1.1.1")
        s1 = self.addSwitch("s1")
        self.addLink(h1, s1)


if __name__ == "__main__":
    setLogLevel("info")
    topo = NetworkTopo()
    net = Mininet(topo=topo, waitConnected=True)

    net.start()
    # info("*** Routing Table on Router:\n")
    # info(net["r0"].cmd("route"))
    CLI(net)
    net.stop()
