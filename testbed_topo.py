from mininet.topo import Topo
from mininet.net import Mininet
from mininet.cli import CLI
from mininet.node import RemoteController
from mininet.log import setLogLevel

from scapy.all import *

KALI_OUTSIDER = '205.174.165.73'
WIN_OUTSIDER_1 = '205.174.165.69'
WIN_OUTSIDER_2 = '205.174.165.70'
WIN_OUTSIDER_3 = '205.174.165.71'

FIREWALL = {
    'local': '172.16.0.1',
    'public': '205.174.165.80'
    }

DNS_DC_SERVER = '192.168.10.3'
WEB_SERVER_16_PUBLIC = {
    'local': '192.168.10.50',
    'public': '205.174.165.68'
    }

UBUNTU_SERVER_12_PUBLIC = {
    'local': '192.168.10.51',
    'public': '205.174.165.66'
    }

UBUNTU_14_32B = '192.168.10.19'
UBUNTU_14_64B = '192.168.10.17'
UBUNTU_16_32B = '192.168.10.16'
UBUNTU_16_64B = '192.168.10.12'
WIN_7_PRO_64B = '192.168.10.9'
WIN_8_64B = '192.168.10.5'
WIN_VISTA_64B = '192.168.10.8'
WIN_10_PRO_32B = '192.168.10.14'
WIN_10_64B = '192.168.10.15'
MAC = '192.168.10.25'

class VictimSDN(Topo):
    "Victim SDN topology."

    def build(self, n):

        # Three servers.
        dns_dc_server = self.addHost('dns_dc_server', ip=DNS_DC_SERVER)
        web_server_16_public = self.addHost('web_server_16_public', ip=WEB_SERVER_16_PUBLIC)
        ubuntu_server_12_public = self.addHost('ubuntu_server_12_public', ip=UBUNTU_SERVER_12_PUBLIC)

        # One firewall.
        firewall = self.addHost('firewall', ip=FIREWALL)

        # Two switches.
        s1 = self.addSwitch('s1', inNamespace=False)
        s2 = self.addSwitch('s2', inNamespace=False)

        # Ten hosts interconnected by a domain controller.
        h1 = self.addHost('h1', ip=UBUNTU_14_32B)
        h2 = self.addHost('h2', ip=UBUNTU_14_64B)
        h3 = self.addHost('h3', ip=UBUNTU_16_32B)
        h4 = self.addHost('h4', ip=UBUNTU_16_64B)
        h5 = self.addHost('h5', ip=WIN_7_PRO_64B)
        h6 = self.addHost('h6', ip=WIN_8_64B)
        h7 = self.addHost('h7', ip=WIN_VISTA_64B)
        h8 = self.addHost('h8', ip=WIN_10_PRO_32B)
        h9 = self.addHost('h9', ip=WIN_10_64B)
        h10 = self.addHost('h10', ip=MAC)

class AttackerNet(Topo):
    "Attacker network topology."

    def build(self, n):

        # One router.

        # One switch.
        s1 = self.addSwitch('s1', inNamespace=False)

        # Four hosts.
        h1 = self.addHost('h1', ip=KALI_OUTSIDER)
        h2 = self.addHost('h2', ip=WIN_OUTSIDER_1)
        h3 = self.addHost('h3', ip=WIN_OUTSIDER_2)
        h4 = self.addHost('h4', ip=WIN_OUTSIDER_3)


topos = { 'victim_sdn': VictimSDN, 'attacker_net': AttackerNet }


def create_victim_sdn() -> Mininet:
    net = Mininet(controller=RemoteController)

    # Controller.
    net.addController('c0', controller=RemoteController, port=6633)

    # Single switch.
    s1 = net.addSwitch('s1', inNamespace=False)

    # Victim hosts.
    victim_h1 = net.addHost('victim_h1', ip=UBUNTU_14_32B)
    victim_h2 = net.addHost('victim_h2', ip=UBUNTU_14_64B)
    victim_h3 = net.addHost('victim_h3', ip=UBUNTU_16_32B)
    victim_h4 = net.addHost('victim_h4', ip=UBUNTU_16_64B)
    victim_h5 = net.addHost('victim_h5', ip=WIN_7_PRO_64B)
    victim_h6 = net.addHost('victim_h6', ip=WIN_8_64B)
    victim_h7 = net.addHost('victim_h7', ip=WIN_VISTA_64B)
    victim_h8 = net.addHost('victim_h8', ip=WIN_10_PRO_32B)
    victim_h9 = net.addHost('victim_h9', ip=WIN_10_64B)
    victim_h10 = net.addHost('victim_h10', ip=MAC)

    # Attacker hosts.
    # attacker_h1 = net.addHost('attack_h1', ip=KALI_OUTSIDER)
    # attacker_h2 = net.addHost('attack_h2', ip=WIN_OUTSIDER_1)
    # attacker_h3 = net.addHost('attack_h3', ip=WIN_OUTSIDER_2)
    # attacker_h4 = net.addHost('attack_h4', ip=WIN_OUTSIDER_3)
    
    all_hosts = [
        victim_h1, victim_h2, victim_h3, victim_h4, victim_h5,
        victim_h6, victim_h7, victim_h8, victim_h9, victim_h10,
        ]

    # Add links
    for host in all_hosts:
        net.addLink(host, s1)

    # # Add firewall.
    # firewall = net.addHost('firewall', ip=FIREWALL['local'])
    # net.addLink(firewall, s1)
    
    net.start()

    # Add routing between networks
    # firewall.cmd('route add -net 192.168.10.0 netmask 255.255.255.0 gw 172.16.0.2')
    
    return net

def simulate_traffic(net: Mininet, pcap_filepath: str):

    def get_host_by_ip(net: Mininet, ip_address: str):
        for host in net.hosts:
            if host.IP() == ip_address:
                return host
        return None

    with PcapReader(filename=pcap_filepath) as pcap_reader:
        for pkt in pcap_reader:

            # Ignore packets that do not contain IP.
            if 'IP' not in pkt:
                continue
            
            src_ip = pkt['IP'].src
            # dst_ip = pkt["IP"].dst

            src_host = get_host_by_ip(net, src_ip)
            if src_host:
                send(x=pkt, realtime=True)




if __name__=='__main__':
    setLogLevel('info')
    net = create_victim_sdn()
    
    CLI(net)

    pcap_filepath = '/home/suraj/reordered_Wednesday-workingHours.pcap'
    # simulate_traffic(net=net, pcap_filepath=pcap_filepath)

    net.stop()