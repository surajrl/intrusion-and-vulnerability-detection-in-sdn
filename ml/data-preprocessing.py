import numpy as np
import pandas as pd
from sklearn.preprocessing import LabelEncoder

def save_dataframe(x_train, y_train, x_test, y_test, features, name):
    X_train = pd.DataFrame(x_train)
    X_train.columns = features
    Y_train = pd.DataFrame(y_train)
    train_frame = [X_train, Y_train]
    train_final = pd.concat(train_frame, axis=1)
    train_final.to_csv(name + '_train.csv', index=False)
    print('Train dataset saved')

    X_test = pd.DataFrame(x_test)
    X_test.columns= features
    Y_test = pd.DataFrame(y_test)
    test_frame = [X_test, Y_test]
    test_final = pd.concat(test_frame, axis=1)
    test_final.to_csv(name + '_test.csv', index=False)
    print('Test dataset Saved')

"""
Read data
"""

train_file_path = ''
test_file_path = ''
train_df = pd.read_csv(train_file_path, skipinitialspace=True)
test_df = pd.read_csv(test_file_path, skipinitialspace=True)
# Print the intial sizes of train and test dataframes
print('Initial shape of training dataset: ', train_df.shape)
print('Initial shape of testing dataset: ', test_df.shape)

"""
Data preprocessing
"""

# Replace infinite numbers with NaN values
train_df.replace([np.inf, -np.inf], np.nan, inplace=True)
test_df.replace([np.inf, -np.inf], np.nan, inplace=True)
# Drop null and NaN values
train_df = train_df.dropna().reset_index(drop=True)
test_df = test_df.dropna().reset_index(drop=True)

# Label-encoding to replace categorical values with numerical
labels = train_df['Label'].values.reshape(-1, 1)
encoder = LabelEncoder()
# Transform fit labels of train and test daframe
train_labels = encoder.fit_transform(labels.reshape(-1,))
test_labels = encoder.transform(test_df['Label'].values.reshape(-1,))
label_order_classes = encoder.classes_
train_df['Label'] = train_labels
test_df['Label'] = test_labels

# Replace NaN and -1 values with the mean of their corresponding column
train_df.replace(-1, np.nan, inplace=True)
test_df.replace(-1, np.nan, inplace=True)
column_means = train_df.mean(skipna=True)
train_df.fillna(column_means, inplace=True)
test_df.fillna(column_means, inplace=True)

# Remove the features with zero values
columns_to_drop = ['Bwd PSH Flags', 'Bwd URG Flags', 'Fwd Avg Bytes/Bulk',
                   'Fwd Avg Packets/Bulk', 'Fwd Avg Bulk Rate', 'Bwd Avg Bytes/Bulk',
                   'Bwd Avg Packets/Bulk', 'Bwd Avg Bulk Rate']
train_df.drop(columns=columns_to_drop, inplace=True)
test_df.drop(columns=columns_to_drop, inplace=True)

# Remove duplicates
train_df = train_df.drop_duplicates().reset_index(drop=True)

print('Final shape of training dataset: ', train_df.shape)
print('Final shape of testing dataset: ', test_df.shape)

# Split data
X_train = train_df.drop(train_df.columns[-1], axis=1)
y_train = train_df[train_df.columns[-1]]
X_test = test_df.drop(test_df.columns[-1], axis=1)
y_test = test_df[test_df.columns[-1]]

save_dataframe(X_train, y_train, X_test, y_test, X_train.columns, 'cleaned_dataset')