import pandas as pd
# SDN modules
from pox.core import core
import pox.openflow.libopenflow_01 as of
from pox.lib.recoco import Timer
# Machine learning modules
from sklearn import tree
from sklearn import preprocessing

log = core.getLogger()

class POX_IDS(object):
  """
  A POX_IDS object is created for each switch that connects.
  A Connection object for that switch is passed to the __init__ function.
  """
  def __init__ (self, connection):
    # Keep track of the connection to the switch so that we can
    # send it messages!
    self.connection = connection

    # Binds our event listeners.
    connection.addListeners(self)

    # Start monitoring traffic.
    Timer(10, self._monitor_traffic, recurring=True)

    # Keep track of which ethernet address is on
    # which switch port (keys are MACs, values are ports).
    self.mac_to_port = {}


  def resend_packet(self, packet_in, out_port):
    """
    Instructs the switch to resend a packet that it had sent to us.
    "packet_in" is the ofp_packet_in object the switch had sent to the
    controller due to a table-miss.
    """
    msg = of.ofp_packet_out()
    msg.data = packet_in

    # Add an action to send to the specified port
    action = of.ofp_action_output(port = out_port)
    msg.actions.append(action)

    # Send message to switch
    self.connection.send(msg)

  def forward_packet(self, packet, packet_in):
    """
    Implement switch-like behavior.
    """

    # Learn the port for the source MAC
    if packet.src not in self.mac_to_port:
      log.debug(f'Controller table miss, learning {packet.src} to {packet_in.in_port}.')
      self.mac_to_port[packet.src] = packet_in.in_port

    if packet.dst in self.mac_to_port:
      # Send packet out the associated port
      log.debug(f'Controller table hit, {packet.dst} to {self.mac_to_port[packet.dst]}.')
      self.resend_packet(packet_in, self.mac_to_port[packet.dst])

      # Once you have the above working, try pushing a flow entry
      # instead of resending the packet (comment out the above and
      # uncomment and complete the below.)

      log.debug("Installing flow...")
      # Maybe the log statement should have source/destination/port?

      # This will instruct the switch to perform 'msg.actions' the next time this packet, instead of sending it to the controller 
      msg = of.ofp_flow_mod()
      
      # Set fields to match received packet
      msg.match = of.ofp_match.from_packet(packet) # Match this packet
      msg.match.dl_dst = packet.dst # The data link layer (MAC) destination address.
      msg.actions.append(of.ofp_action_output(port=self.mac_to_port[packet.dst])) # Send this packet to this port
      msg.idle_timeout = 0 # Number of idle seconds before the flow entry is removed.
      msg.hard_timeout = 0 # Number of seconds before the flow entry is removed.

      self.connection.send(msg)

    else:
      # Flood the packet out everything but the input port
      self.resend_packet(packet_in, of.OFPP_ALL)

  def _monitor_traffic(self):
    log.info('Requesting flow stats ...')
    req = of.ofp_stats_request(body=of.ofp_flow_stats_request())
    self.connection.send(req)

   # Event attributes:
  # - connection (Connection): connection to the relevant switch (e.g., which sent the message this event corresponds to).
  # - dpid (long): datapath ID of relevant switch (use dpid_to_str() to format it for display).
  # - ofp: because a StatsReply may have glued together multiple individual OpenFlow messages, the .ofp attribute is a _list_ of ofp_stats_reply messages. (In the typical case, however, the list has a single entry.)
  # - stats: all of the individual stats bodies in a single list
  def _handle_FlowStatsReceived(self, event):
    log.info('FlowStats received ...')
    for stat in event.stats:
          log.info(f'Table ID: {stat.table_id}')
          log.info(f'Match: {stat.match}')
          log.info(f'Duration (sec): {stat.duration_sec}')
          log.info(f'Duration (nsec): {stat.duration_nsec}')
          log.info(f'Priority: {stat.priority}')
          log.info(f'Idle timeout: {stat.idle_timeout}')
          log.info(f'Hard timeout: {stat.hard_timeout}')
          log.info(f'Cookie: {stat.cookie}')
          log.info(f'Packet count: {stat.packet_count}')
          log.info(f'Byte count: {stat.byte_count}')
          log.info(f'Actions: {stat.actions}')
    log.info('\n')

  # Event attributes:
  # - connection (Connection): connection to the relevant switch (e.g., which sent the message this event corresponds to).
  # - dpid (long): datapath ID of relevant switch (use dpid_to_str() to format it for display).
  # - ofp (ofp_packet_in): OpenFlow message which caused this event
  # - port (int): number of port the packet came in on
  # - data (bytes): raw packet data
  # - parsed (packet subclasses): pox.lib.packet's parsed version
  def _handle_PacketIn(self, event):
    """
    Handles packet in messages from the switch.
    These are packets that the switch does not have a flow entry for (i think)
    """
    log.info('PacketIn received ...')

    of_packet_in = event.ofp
    pox_packet = event.parsed  

    if not pox_packet.parsed:
      log.info('Ignoring incomplete packet')
      return

    self.forward_packet(packet=pox_packet, packet_in=of_packet_in)

def start_switch(event):
  log.info('Controlling %s' % (event.connection,))
  POX_IDS(event.connection)

def launch ():
  """
  Starts the component
  """
  core.openflow.addListenerByName('ConnectionUp', start_switch)
